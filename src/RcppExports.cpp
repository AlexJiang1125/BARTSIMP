// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mySPDE
RcppExport SEXP mySPDE(Rcpp::NumericVector s1, Rcpp::NumericVector s2, Rcpp::NumericVector y);
RcppExport SEXP _BARTSIMP_mySPDE(SEXP s1SEXP, SEXP s2SEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(mySPDE(s1, s2, y));
    return rcpp_result_gen;
END_RCPP
}
// makeC
SEXP makeC(std::vector<size_t> idv, size_t n);
RcppExport SEXP _BARTSIMP_makeC(SEXP idvSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<size_t> >::type idv(idvSEXP);
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(makeC(idv, n));
    return rcpp_result_gen;
END_RCPP
}
// convertC
arma::mat convertC(SEXP mat);
RcppExport SEXP _BARTSIMP_convertC(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(convertC(mat));
    return rcpp_result_gen;
END_RCPP
}
// testDFtoNM
NumericMatrix testDFtoNM(DataFrame x);
RcppExport SEXP _BARTSIMP_testDFtoNM(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(testDFtoNM(x));
    return rcpp_result_gen;
END_RCPP
}
// callPrint
void callPrint(RObject x);
RcppExport SEXP _BARTSIMP_callPrint(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject >::type x(xSEXP);
    callPrint(x);
    return R_NilValue;
END_RCPP
}
// useOperatorOnVector
void useOperatorOnVector(NumericVector x);
RcppExport SEXP _BARTSIMP_useOperatorOnVector(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    useOperatorOnVector(x);
    return R_NilValue;
END_RCPP
}
// useOperatorOnMatrix
void useOperatorOnMatrix(NumericMatrix x);
RcppExport SEXP _BARTSIMP_useOperatorOnMatrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    useOperatorOnMatrix(x);
    return R_NilValue;
END_RCPP
}
// test
double test(Rcpp::NumericVector s1, Rcpp::NumericVector s2, Rcpp::NumericVector ydata);
RcppExport SEXP _BARTSIMP_test(SEXP s1SEXP, SEXP s2SEXP, SEXP ydataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type s1(s1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ydata(ydataSEXP);
    rcpp_result_gen = Rcpp::wrap(test(s1, s2, ydata));
    return rcpp_result_gen;
END_RCPP
}
// test2
double test2(Rcpp::DataFrame mydf);
RcppExport SEXP _BARTSIMP_test2(SEXP mydfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type mydf(mydfSEXP);
    rcpp_result_gen = Rcpp::wrap(test2(mydf));
    return rcpp_result_gen;
END_RCPP
}
// timesTwo
int timesTwo();
RcppExport SEXP _BARTSIMP_timesTwo() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(timesTwo());
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP cwbart(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_BARTSIMP_mySPDE", (DL_FUNC) &_BARTSIMP_mySPDE, 3},
    {"_BARTSIMP_makeC", (DL_FUNC) &_BARTSIMP_makeC, 2},
    {"_BARTSIMP_convertC", (DL_FUNC) &_BARTSIMP_convertC, 1},
    {"_BARTSIMP_testDFtoNM", (DL_FUNC) &_BARTSIMP_testDFtoNM, 1},
    {"_BARTSIMP_callPrint", (DL_FUNC) &_BARTSIMP_callPrint, 1},
    {"_BARTSIMP_useOperatorOnVector", (DL_FUNC) &_BARTSIMP_useOperatorOnVector, 1},
    {"_BARTSIMP_useOperatorOnMatrix", (DL_FUNC) &_BARTSIMP_useOperatorOnMatrix, 1},
    {"_BARTSIMP_test", (DL_FUNC) &_BARTSIMP_test, 3},
    {"_BARTSIMP_test2", (DL_FUNC) &_BARTSIMP_test2, 1},
    {"_BARTSIMP_timesTwo", (DL_FUNC) &_BARTSIMP_timesTwo, 0},
    {"cwbart", (DL_FUNC) &cwbart, 47},
    {NULL, NULL, 0}
};

RcppExport void R_init_BARTSIMP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
